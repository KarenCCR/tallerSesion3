package testSuite;

import io.qameta.allure.*;
import io.restassured.response.Response;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;

public class VulnerabilityTestTodoIsTLogin {

    String idScan;

    @Test
    @Order(2)
    @Owner("Proyecto de Prueba Java : eduardo bardales bruno")
    @Epic("Vulnerability")
    @Feature("Vulnerability Scan")
    @Story("OWASP ZAP")
    @DisplayName("Realizar un escaneo de vulnerabilidades en Todoist")
    @Description("Realizar un escaneo de vulnerabilidades en la aplicaci√≥n web Todoist usando OWASP ZAP")
    @Severity(SeverityLevel.BLOCKER)
    public void scanVulnerabilityTest() throws InterruptedException {
        idScan = startScanner();
        waitUntilScannerIsRunning(idScan);
    }

    @AfterEach
    public void reportAfter() {
        Response response;

        // Obtener lista de alertas
        response = given()
                .queryParam("baseurl", "https://www.todoist.com/es")
                .log().all()
                .when()
                .get("http://localhost:9199/HTML/alert/view/alerts/");
        response.then().log().all();
        this.attachmentHTML("Report Alerts", response.getBody().asString());

        // Obtener lista de vulnerabilidades
        response = given()
                .queryParam("scanId", idScan)
                .log().all()
                .when()
                .get("http://localhost:9199/HTML/ascan/view/scanProgress/");
        response.then().log().all();
        this.attachmentHTML("Vulnerability List", response.getBody().asString());

        // Generar el reporte
        response = given()
                .log().all()
                .when()
                .get("http://localhost:9199/OTHER/core/other/htmlreport/");
        response.then().log().all();
        this.attachmentHTML("OWASP ZAP Vulnerability Detail Report", response.getBody().asString());
    }

    @Attachment(value = "{0}", type = "text/html")
    public String attachmentHTML(String name, String content) {
        return content;
    }

    @Step("Espera a que el escaneo se complete en 100%")
    private static void waitUntilScannerIsRunning(String idScan) throws InterruptedException {
        Response response;
        String status = "0";
        do {
            Thread.sleep(10000);

            response = given()
                    .queryParam("scanId", idScan)
                    .log().all()
                    .when()
                    .get("http://localhost:9199/JSON/ascan/view/status/");
            response.then().log().all();
            status = response.then().extract().path("status");
            System.out.println("Estado Actual: [" + status + "%]");

        } while (!status.equals("100"));
        System.out.println("Completed: " + status + "% == 100%");
    }

    @Step("Iniciar el escaneo de Vulnerabilidades usando ZAP")
    private static String startScanner() {
        Response response = given()
                .queryParam("url", "https://www.todoist.com/es")
                .log().all()
                .when()
                .get("http://localhost:9199/JSON/ascan/action/scan/");
        response.then().log().all();

        return response.then().extract().path("scan");
    }
}